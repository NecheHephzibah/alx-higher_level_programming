The ``1-my_list`` module
========================


Using ``MyList``
----------------

Import class from module:
	>>> MyList = __import__('1-my_list').MyList

Test the normal case:
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(my_list)
	[1, 4, 2, 3, 5]

Test for when a new list is passed:
	>>> kk = [8, 5, 3, 8]
	>>> my_list = MyList(kk)
	>>> my_list.print_sorted()
	[3, 5, 8, 8]

Test for an empty list:
	>>> kk = []
	>>> my_list = MyList(kk)
	>>> my_list.print_sorted()
	[]

Test for the same int in list:
	>>> kk = [7, 7, 7, 7]
	>>> my_list = MyList(kk)
	>>> my_list.print_sorted()
	[7, 7, 7, 7]

Test for when list is made up of int and string:
	>>> kk = ['j', 0, 6, 2, 4]
	>>> my_list = MyList(kk)
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: '<' not supported between instances of 'int' and 'str'

Test for same number:
	>>> my_lista = MyList()
	>>> my_lista.append(7)
	>>> my_lista.append(7)
	>>> my_lista.append(7)
	>>> my_lista.append(7)
	>>> my_lista.print_sorted()
	[7, 7, 7, 7]

Test for object:
	>>> my_list = MyList()
	>>> my_list = [3, 7, 5, 4]
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	...
	AttributeError: 'list' object has no attribute 'print_sorted'
